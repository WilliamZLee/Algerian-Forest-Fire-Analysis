View(ForestfireData)
model1 <- regsubsets(Classes ~ ISI + DC, data = Algerian_train,nvmax = ncol(data) - 1, method = "exhaustive")
summary(model1)
plot(model1)
model1 <- glm(Classes ~ DC + ISI, data = Algerian_train, family = "dominal")
model1 <- glm(Classes ~ DC + ISI, data = Algerian_train, family = "binomial")
summary(model1)
model1 <- glm(Classes ~ month + Region + ISI, data = Algerian_train, family = "binomial")
summary(model1)
model1 <- glm(Classes ~ Region + DC, data = Algerian_train, family = "binomial")
summary(model1)
model1 <- glm(Classes ~ Region$Bejaia + DC, data = Algerian_train, family = "binomial")
model0 <- regsubsets(Classes ~ ., data = Algerian_train, nvmax = ncol(data) - 1, method = "exhaustive" )
summary(model0)
plot(model0)
model1 <- glm(Classes ~ WS + DMC + DC + Region, data = Algerian_train, family = "binomial")
model1 <- glm(Classes ~ Ws + DMC + DC + Region, data = Algerian_train, family = "binomial")
summary(model1)
model2 <- glm(Classes ~ DMC + month, data = Algerian_train, family = "binomial")
summary(model2)
model2 <- glm(Classes ~ DMC, data = Algerian_train, family = "binomial")
summary(model2)
prediction0 <-predict(model2, Algerian_test, type="response")
predROCR0 <- prediction(prediction0, Algerian_test$Classes)
perfROCR0 <- performance(predROCR0, "tpr", "fpr")
plot(perfROCR0, colorize = TRUE) + abline(0,1)
performance(predROCR0, "auc")@y.values
prediction0 <-predict(model2, Algerian_test, type="response")
predROCR0 <- prediction(prediction0, Algerian_test$Classes)
perfROCR0 <- performance(predROCR0, "tpr", "fpr")
plot(perfROCR0, colorize = TRUE) + abline(0,1) + labs(title = "DMC LR model")
prediction0 <-predict(model2, Algerian_test, type="response")
predROCR0 <- prediction(prediction0, Algerian_test$Classes)
perfROCR0 <- performance(predROCR0, "tpr", "fpr")
plot(perfROCR0, colorize = TRUE) + abline(0,1) + labs(title = DMC)
prediction0 <-predict(model2, Algerian_test, type="response")
predROCR0 <- prediction(prediction0, Algerian_test$Classes)
perfROCR0 <- performance(predROCR0, "tpr", "fpr")
plot(perfROCR0, colorize = TRUE) + abline(0,1) + labs(title = 'DMC')
p <- predict(model_all,type = "response")
model_all <- glm(Classes ~ ., data = Algerian_train, binomial(link = 'logit'), control = list(maxit = 100))
summary(model_all)
p <- predict(model_all,type = "response")
plot(sort(p),col = "blue")
modelDT1 <- rpart(formula = Classes ~ Ws + DMC + Region
method = "class",
modelDT1 <- rpart(formula = Classes ~ Ws + DMC + Region,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT1, main = "Decision Tree comparing with model1")
plot(roc(Algerian_test$Classes,
predict(modelDT1, Algerian_test, type = 'prob')[,2],),
print.auc = TRUE, print.thres = TRUE,
xlab = "Specificity",
ylab = "Sensitinity")
model2 <- glm(Classes ~ DMC + Region, data = Algerian_train, family = "binomial")
summary(model2)
prediction0 <-predict(model2, Algerian_test, type="response")
predROCR0 <- prediction(prediction0, Algerian_test$Classes)
perfROCR0 <- performance(predROCR0, "tpr", "fpr")
plot(perfROCR0, colorize = TRUE) + abline(0,1)
performance(predROCR0, "auc")@y.values
modelDT12<- rpart(formula = Classes ~ DMC + Region,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT2, main = "Decision Tree comparing with model2")
modelDT12<- rpart(formula = Classes ~ DMC + Region,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT2, main = "Decision Tree comparing with model2")
modelDT12<- rpart(formula = Classes ~ DMC + Region,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT2, main = "Decision Tree comparing with model2")
modelDT2<- rpart(formula = Classes ~ DMC + Region,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT2, main = "Decision Tree comparing with model2")
plot(roc(Algerian_test$Classes,
predict(modelDT2, Algerian_test, type = 'prob')[,2],),
print.auc = TRUE, print.thres = TRUE,
xlab = "Specificity",
ylab = "Sensitinity")
summary(Algerian_train$Classes)
summary(Algerian_test$Classes)
modelDT_all<- rpart(formula = Classes ~ .,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT_all, main = "Decision Tree all")
plot(roc(Algerian_test$Classes,
predict(modelDT_all, Algerian_test, type = 'prob')[,2],),
print.auc = TRUE, print.thres = TRUE,
xlab = "Specificity",
ylab = "Sensitinity")
plot_list <- list()
for (var_name in ForestFire_factors){
plot <- ggplot(data = ForestfireData, aes(x = .data[[var_name]],fill = .data[[var_name]])) +
geom_bar() +
labs(title = var_name) +
theme_minimal()
plot_list[[var_name]] <- plot
}
gridExtra::grid.arrange(grobs = plot_list, ncol = 2)
gridExtra::grid.arrange(grobs = plot_list, ncol = 3)
plot_list1 <- list()
for (var_name in ForestFire_numeric){
plot <- ggplot(data = ForestfireData, aes(x = .data[[var_name]],fill = factor(Classes))) +
geom_density(alpha = 0.3) +
labs(title = var_name) +
theme_minimal()
plot_list1[[var_name]] <- plot
}
# Arrange and display the plots in a single panel
gridExtra::grid.arrange(grobs = plot_list1, ncol = 4)
plot_list2 <- list()
for(var_name in ForestFire_numeric){
plot <- ggplot(data = ForestfireData, aes(x = .data[[var_name]], y = Classes)) +
geom_point() +
geom_smooth() +
labs(title = var_name)
plot_list2[[var_name]] <- plot
}
gridExtra::grid.arrange(grobs = plot_list2, ncol = 4)
Algerian_rf <- train(Classes ~ .,
data = Algerian_train,
method = "rf",
prox = TRUE,
trControl = Fcontrol,
metric = "Accuracy")
Fcontrol <- trainControl(method = "cv", number = 10,
classProbs = T,
savePredictions = T)
Algerian_rf <- train(Classes ~ .,
data = Algerian_train,
method = "rf",
prox = TRUE,
trControl = Fcontrol,
metric = "Accuracy")
?make.names
str(Algerian_train)
make.names(c("fire","not fire"),unique = TRUE)
Fcontrol <- trainControl(method = "cv", number = 10,
classProbs = T,
savePredictions = T)
## Random forest model
Algerian_rf <- train(Classes ~ .,
data = Algerian_train,
method = "rf",
prox = TRUE,
trControl = Fcontrol,
metric = "Accuracy")
make.names(c("fire","not fire"),unique = TRUE,allow_ = FALSE)
Fcontrol <- trainControl(method = "cv", number = 10,
classProbs = T,
savePredictions = T)
## Random forest model
Algerian_rf <- train(Classes ~ .,
data = Algerian_train,
method = "rf",
prox = TRUE,
trControl = Fcontrol,
metric = "Accuracy")
make.names(c(" ","not fire"),unique = TRUE,allow_ = FALSE)
make.names(c("fire"," ", "not fire"),unique = TRUE,allow_ = FALSE)
Fcontrol <- trainControl(method = "cv", number = 10,
classProbs = T,
savePredictions = T)
## Random forest model
Algerian_rf <- train(Classes ~ .,
data = Algerian_train,
method = "rf",
prox = TRUE,
trControl = Fcontrol,
metric = "Accuracy")
Classes <- make.names(rownames(Algerian_train.estimate(ForestfireData)))
Classes <- make.names(rownames(ForestfireData.Classes(ForestfireData)))
Classes <- make.names(rownames(ForestfireData$Classes(ForestfireData)))
Classes <- make.names(Classes)
ForestfireData$Classes <- make.names(ForestfireData$Classes)
Fcontrol <- trainControl(method = "cv", number = 10,
classProbs = T,
savePredictions = T)
## Random forest model
Algerian_rf <- train(Classes ~ .,
data = Algerian_train,
method = "rf",
prox = TRUE,
trControl = Fcontrol,
metric = "Accuracy")
set.seed(12222)
Algerian_ind <- ForestfireData$Classes %>%
createDataPartition(p = 0.90, list = FALSE)
Algerian_train <- ForestfireData[Algerian_ind, ]
Algerian_test <- ForestfireData[-Algerian_ind, ]
summary(Algerian_train$Classes)  ## fire 56.6%
summary(Algerian_test$Classes)
Fcontrol <- trainControl(method = "cv", number = 10,
classProbs = T,
savePredictions = T)
## Random forest model
Algerian_rf <- train(Classes ~ .,
data = Algerian_train,
method = "rf",
prox = TRUE,
trControl = Fcontrol,
metric = "Accuracy")
print(Algerian_rf)
plot(Algerian_rf)
plot(roc(Algerian_test$Classes,
predict(Algerian_rf, Algerian_test, type = 'prob')[,2],),
print.auc = TRUE, print.thres = TRUE,
xlab = "Specificity",
ylab = "Sensitinity")
predictionRF <- predict(Algerian_rf, newdata = Algerian_test)
confusionMatrix(predictionRF,Algerian_test)
RF_confusionMatrix <- confusionMatrix(factor(Algerian_rf),Algerian_test$Classes,positive = "T")
Z <- table(Algerian_test[,1],predictionRF)
Z
Algerian_rf
library(randomForest)
Algerian_rf1 <- randomForest(Classes ~ .,
data = Algerian_train,
mtry = 10,
importance = TRUE,
proximity = TRUE)
str(ForestfireData)
ForestFire_factors <- c("Classes","month","Region")
ForestfireData[ForestFire_factors] <- lapply(ForestfireData[ForestFire_factors],as.factor)
set.seed(12222)
Algerian_ind <- ForestfireData$Classes %>%
createDataPartition(p = 0.90, list = FALSE)
Algerian_train <- ForestfireData[Algerian_ind, ]
Algerian_test <- ForestfireData[-Algerian_ind, ]
summary(Algerian_train$Classes)  ## fire 56.6%
summary(Algerian_test$Classes)   ## fire 56.5%
rm(Algerian_ind)
Algerian_rf1 <- randomForest(Classes ~ .,
data = Algerian_train,
mtry = 10,
importance = TRUE,
proximity = TRUE)
print(Algerian_rf1)
plot(Algerian_rf1)
importance(Algerian_rf1,type = 1)
plot(roc(Algerian_test$Classes,
predict(Algerian_rf1, Algerian_test, type = 'prob')[,2],),
print.auc = TRUE, print.thres = TRUE,
xlab = "Specificity",
ylab = "Sensitinity")
matplot(importance(Algerian_rf1)[,1:2], type = "o",
pch = 1:2,lty = 1:2,col = 1,
xlab = "vN",ylab = "Importance",axes = F)
axis(1,1:9,names(ForestfireData)[-1]);axis(2)
axis(1,1:14,names(ForestfireData)[-1]);axis(2)
matplot(importance(Algerian_rf1)[,1:2], type = "o",
pch = 1:2,lty = 1:2,col = 1,
xlab = "vN",ylab = "Importance",axes = F)
axis(1,1:14,names(ForestfireData)[-1]);axis(2)
title("variable importance")
legend("topright",legend = paste("Type = ",levels(ForestfireData[,1]),sep = ""),pch = 1:2,lty = 1:2,col = 1)
legend("topright",legend = paste("Type =",levels(ForestfireData[,1]),sep = ""),pch = 1:2,lty = 1:2,col = 1)
title("variable importance")
matplot(importance(Algerian_rf1)[,1:2], type = "o",
pch = 1:2,lty = 1:2,col = 1,
xlab = "vN",ylab = "Importance",axes = F)
axis(1,1:14,names(ForestfireData)[-1]);axis(2)
title("variable importance")
legend("topright",legend = paste("Type=",levels(ForestfireData[,14]),sep = ""),pch = 1:2,lty = 1:2,col = 1)
legend("topright",legend = paste("Type=",levels(ForestfireData[,14]),sep = ""),pch = 1:1,lty = 1:1,col = 1)
legend("topright",legend = paste("Type=",levels(ForestfireData[,14]),sep = ""),pch = 1:2,lty = 1:2,col = 2)
legend("topright",legend = paste("Type=",levels(ForestfireData[,14]),sep = ""),pch = 1:2,lty = 1:2,col = 2)
legend("topright",legend = paste("Type=",levels(ForestfireData[,14]),sep = ""),pch = 1:2,lty = 1:2,col = 1)
legend("topleft",legend = paste("Type=",levels(ForestfireData[,14]),sep = ""),pch = 1:2,lty = 1:2,col = 1)
matplot(importance(Algerian_rf1)[,1:2], type = "o",
pch = 1:2,lty = 1:2,col = 1,
xlab = "vN",ylab = "Importance",axes = F)
axis(1,1:14,names(ForestfireData)[-1]);axis(2)
title("variable importance")
legend("topleft",legend = paste("Type=",levels(ForestfireData[,14]),sep = ""),pch = 1:2,lty = 1:2,col = 1)
barplot(importance(Algerian_rf1)[,3], cex.names = .6)
title("variable importance according to mean decease accuracy")
barplot(importance(Algerian_rf1)[,4], cex.names = .6)
title("variable importance according to mean decease gini")
matplot(importance(Algerian_rf1)[,1:2], type = "o",
pch = 1:2,lty = 1:2,col = 2,
xlab = "vN",ylab = "Importance",axes = F)
axis(1,1:14,names(ForestfireData)[-1]);axis(2)
title("variable importance")
legend("topleft",legend = paste("Type=",levels(ForestfireData[,14]),sep = ""),pch = 1:2,lty = 1:2,col = 1)
matplot(importance(Algerian_rf1)[,1:2], type = "o",
pch = 1:2,lty = 1:2,col = 1:2,
xlab = "vN",ylab = "Importance",axes = F)
axis(1,1:14,names(ForestfireData)[-1]);axis(2)
title("variable importance")
legend("topleft",legend = paste("Type=",levels(ForestfireData[,14]),sep = ""),pch = 1:2,lty = 1:2,col = 1)
matplot(importance(Algerian_rf1)[,1:2], type = "o",
pch = 1:2,lty = 1:2,col = 1:2,
xlab = "vN",ylab = "Importance",axes = F)
axis(1,1:14,names(ForestfireData)[-1]);axis(2)
title("variable importance")
legend("topleft",
legend = paste("Type=",
levels(ForestfireData[,14]),
sep = ""),
pch = 1:2,lty = 1:2,
col = 1:2)
predictionRF1 <- predict(Algerian_rf1,
newdata = Algerian_test,
type = "class")
predictionRF1_cf <- caret::confusionMatrix(as.factor(predictionRF1),
as.factor(Algerian_test$Classes))
predictionRF1_cf
predictionRF <- predict(Algerian_rf,
newdata = Algerian_test,
type = "class")
predictionRF <- predict(Algerian_rf,
newdata = Algerian_test,
type = "prob")
predictionRF_cf <- caret::confusionMatrix(as.factor(predictionRF),
as.factor(Algerian_test$Classes))
predictionRF <- predict(Algerian_rf,
newdata = Algerian_test,
type = "prob")
predictionRF_cf <- caret::confusionMatrix(as.factor(predictionRF),
as.factor(Algerian_test$Classes))
barplot(importance(Algerian_rf1)[,3], cex.names = .6)
title("variable importance according to mean decrease accuracy")
barplot(importance(Algerian_rf1)[,4], cex.names = .6)
title("variable importance according to mean decrease gini")
plot(roc(Algerian_test$Classes,
predict(Algerian_rf1, Algerian_test, type = 'prob')[,2],),
print.auc = TRUE, print.thres = TRUE,
xlab = "Specificity",
ylab = "Sensitinity")
plot1 <- layer1 + geom1
plot2 <- layer1 + geom2
plotR1 <- layerR1 + geomR1
plotR2 <- layerR1 + geomR2
combined_plots <- gridExtra::grid.arrange(plot1,plot2,plotR1,plotR2,ncol = 2)
plot(combined_plots)
plotR1 <- layerR1 + geomR1 + ylab("Times of forest fire")
plotR2 <- layerR1 + geomR2 + ylab("percentage of forest fire")
combined_plots <- gridExtra::grid.arrange(plot1,plot2,plotR1,plotR2,ncol = 2)
plot(combined_plots)
plot1 <- layer1 + geom1 + ylab("Times of forest fire")
plot2 <- layer1 + geom2 + ylab("percentage of forest fire")
combined_plots <- gridExtra::grid.arrange(plot1,plot2,plotR1,plotR2,ncol = 2)
plot(combined_plots)
table(ForestfireData$Classes,ForestfireData$Temperature)
prop.table(table(ForestfireData$Classes,ForestfireData$Temperature))*100
chisq.test(ForestfireData$Classes,ForestfireData$Temperature)
TemperatureTable <- xtabs(~Classes + Temperature, data = ForestfireData)
print(TemperatureTable)
summary(TemperatureTable)
modelDT_all<- rpart(formula = Classes ~ .,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT_all, main = "Decision Tree all")
plot(roc(Algerian_test$Classes,
predict(modelDT_all, Algerian_test, type = 'prob')[,2],),
print.auc = TRUE, print.thres = TRUE,
xlab = "Specificity",
ylab = "Sensitinity")
Algerian_rf2 <- randomForest(Classes ~ month + RH + DC + Ws +  ISI,
data = Algerian_train,
mtry = 10,
importance = TRUE,
proximity = TRUE)
print(Algerian_rf2)
plot(Algerian_rf2)
predictionRF2 <- predict(Algerian_rf2,
newdata = Algerian_test,
type = "class")
predictionRF2_cf <- caret::confusionMatrix(as.factor(predictionRF2),
as.factor(Algerian_test$Classes))
predictionRF2_cf
matplot(importance(Algerian_rf2)[,1:2], type = "o",
pch = 1:2,lty = 1:2,col = 1:2,
xlab = "vN",ylab = "Importance",axes = F)
axis(1,1:14,names(ForestfireData)[-1]);axis(2)
title("variable importance")
legend("topleft",
legend = paste("Type=",
levels(ForestfireData[,14]),
sep = ""),
pch = 1:2,lty = 1:2,
col = 1:2)
## bar chart - by accuracy & gini
barplot(importance(Algerian_rf2)[,3], cex.names = .6)
title("variable importance according to mean decrease accuracy")
barplot(importance(Algerian_rf2)[,4], cex.names = .6)
title("variable importance according to mean decrease gini")
plot(roc(Algerian_test$Classes,
predict(Algerian_rf2, Algerian_test, type = 'prob')[,2],),
print.auc = TRUE, print.thres = TRUE,
xlab = "Specificity",
ylab = "Sensitinity")
source("D:/Duke/UWA/2023S2/5002/Team Assignment/AlgerianForestFire/Forest Fire.R")
source("D:/Duke/UWA/2023S2/5002/Team Assignment/AlgerianForestFire/Forest Fire.R")
source("D:/Duke/UWA/2023S2/5002/Team Assignment/AlgerianForestFire/Forest Fire.R")
source("D:/Duke/UWA/2023S2/5002/Team Assignment/AlgerianForestFire/Forest Fire.R")
cat("\014")  # ctrl+L
## get working directory
getwd()
pacman::p_load(pacman, tidyverse, gmodels,ROCR, rpart, rpart.plot,caret,ggplot2,dplyr,psych,rattle,pROC,GGally,leaps)
library(gridExtra)
library(randomForest)
## data
model_all <- glm(Classes ~ ., data = Algerian_train, binomial(link = 'logit'), control = list(maxit = 100))
summary(model_all)
Algerian_rf1 <- randomForest(Classes ~ .,
data = Algerian_train,
mtry = 10,
importance = TRUE,
proximity = TRUE)
print(Algerian_rf1)
importance(Algerian_rf1,type = 1)
predictionRF2 <- predict(Algerian_rf2,
newdata = Algerian_test,
type = "class")
predictionRF2_cf <- caret::confusionMatrix(as.factor(predictionRF2),
as.factor(Algerian_test$Classes))
predictionRF2_cf
source("D:/Duke/UWA/2023S2/5002/Team Assignment/AlgerianForestFire/Forest Fire.R")
modelDT2<- rpart(formula = Classes ~ DMC + Region,
method = "class",
data = Algerian_train)
pacman::p_load(pacman, tidyverse, gmodels,ROCR, rpart, rpart.plot,caret,ggplot2,dplyr,psych,rattle,pROC,GGally,leaps)
library(gridExtra)
library(randomForest)
modelDT2<- rpart(formula = Classes ~ DMC + Region,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT2, main = "Decision Tree comparing with model2")
modelDT2<- rpart(formula = Classes ~ DMC + Region,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT2, main = "Decision Tree comparing with model2")
modelDT_all<- rpart(formula = Classes ~ .,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT_all, main = "Decision Tree all")
modelDT1 <- rpart(formula = Classes ~ Ws + DMC + Region,
method = "class",
data = Algerian_train)
fancyRpartPlot(modelDT1, main = "Decision Tree comparing with model1")
predictionDTall <- predict(modelDT_all,
newdata = Algerian_test,
type = "class")
predictionDTall <- caret::confusionMatrix(as.factor(modelDT_all),
as.factor(Algerian_test$Classes))
predictionDTall <- predict(modelDT_all,
newdata = Algerian_test,
type = "class")
predictionDTall <-  confusionMatrix(data = predictionDTall,
reference = Algerian_test$Classes)
pacman::p_load(pacman, tidyverse, gmodels,ROCR, rpart, rpart.plot,caret,ggplot2,dplyr,psych,rattle,pROC,GGally,leaps)
library(gridExtra)
library(randomForest)
predictionDTall <- predict(modelDT_all,
newdata = Algerian_test,
type = "class")
predictionDTall <-  confusionMatrix(data = predictionDTall,
reference = Algerian_test$Classes)
predictionDTall
predictionRF2 <- predict(Algerian_rf2,
newdata = Algerian_test,
type = "class")
predictionRF2_cf <- caret::confusionMatrix(as.factor(predictionRF2),
as.factor(Algerian_test$Classes))
predictionRF2_cf
predictionRF1 <- predict(Algerian_rf1,
newdata = Algerian_test,
type = "class")
predictionRF1_cf <- caret::confusionMatrix(as.factor(predictionRF1),
as.factor(Algerian_test$Classes))
predictionRF1_cf
predictionDT2 <- predict(modelDT2l,
newdata = Algerian_test,
type = "class")
predictionDT2 <- predict(modelDT2,
newdata = Algerian_test,
type = "class")
predictionDT2 <-  confusionMatrix(data = predictionDT2,
reference = Algerian_test$Classes)
predictionDT2
predictionDT1 <- predict(modelDT1,
newdata = Algerian_test,
type = "class")
predictionDT1 <-  confusionMatrix(data = predictionDT1,
reference = Algerian_test$Classes)
predictionDT1
prediction2 <- predict(model2,
newdata = Algerian_test,
type = "class")
prediction2 <- predict(model2,
newdata = Algerian_test,
type = "class")
prediction2 <- predict(model2,
newdata = Algerian_test,
type = "response")
prediction2 <-  confusionMatrix(data = prediction2,
reference = Algerian_test$Classes,
positive = "1")
Algerian_rf2 <- randomForest(Classes ~ month + RH + DC + Ws +  ISI,
data = Algerian_train,
mtry = 10,
importance = TRUE,
proximity = TRUE)
print(Algerian_rf2)
source("D:/Duke/UWA/2023S2/5002/Team Assignment/AlgerianForestFire/Forest Fire.R")
source("D:/Duke/UWA/2023S2/5002/Team Assignment/AlgerianForestFire/Algerian_Forest_Fire_Prediction_Group 24.R")
